// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: matches.sql

package gen

import (
	"context"

	"github.com/google/uuid"
)

const matches = `-- name: Matches :many
SELECT 
    m.initiator_id,
    m.target_id
FROM 
    user_matches m
WHERE
    m.initiator_id = $1 OR m.target_id = $1
ORDER BY m.initiator_id DESC LIMIT $2 OFFSET $3
`

type MatchesParams struct {
	InitiatorID uuid.UUID
	Limit       int32
	Offset      int32
}

func (q *Queries) Matches(ctx context.Context, arg MatchesParams) ([]UserMatch, error) {
	rows, err := q.db.Query(ctx, matches, arg.InitiatorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserMatch
	for rows.Next() {
		var i UserMatch
		if err := rows.Scan(&i.InitiatorID, &i.TargetID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
