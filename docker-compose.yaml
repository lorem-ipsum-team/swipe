services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: swipes
    restart: unless-stopped
    environment:
      - LOG_LEVEL=debug
      - LOG_FORMAT=text
      - DB_URL=postgres://postgres:postgres@postgres:5432/swipes
      - LISTEN_ADDR=0.0.0.0:8080
      - RABBIT_URL=amqp://rabbit:rabbit@rabbitmq:5672/
      - SWIPE_QUEUE=swipes
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: swipes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbit
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
 
volumes:
  postgres_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge